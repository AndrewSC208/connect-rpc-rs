//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.6

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "location")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub uuid: Uuid,
    pub created_by: Uuid,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub deleted_at: Option<DateTime>,
    pub name: String,
    pub address: String,
    pub merchant_uuid: Uuid,
    pub kind_uuid: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::location_kind::Entity",
        from = "Column::KindUuid",
        to = "super::location_kind::Column::Uuid",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    LocationKind,
    #[sea_orm(
        belongs_to = "super::merchant::Entity",
        from = "Column::MerchantUuid",
        to = "super::merchant::Column::Uuid",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Merchant,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::CreatedBy",
        to = "super::users::Column::Uuid",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Users,
}

impl Related<super::location_kind::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LocationKind.def()
    }
}

impl Related<super::merchant::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Merchant.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
